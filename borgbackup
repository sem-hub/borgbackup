#!/bin/sh

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

if [ -z ${BORG_BACKUP_URL+x} ]; then
	info "Error: \$BORG_BACKUP_URL undefined. Exiting."
	exit 1
fi
if [ -z ${BORG_HOME_PATH+x} ]; then
	# Linux default
	BORG_HOME_PATH=/home
fi
BORG_HOSTNAME=`hostname -s`
BORG_BACKUP_PATH=$BORG_BASE_PATH/$BORG_HOSTNAME
# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=$BORG_BACKUP_URL/$BORG_BACKUP_PATH
info "Using repo: $BORG_REPO"
# See the section "Passphrase notes" for more infos.
if [ -z ${BORG_PASSPHRASE+x} ]; then
	export BORG_PASSPHRASE=''
fi

hostname=`hostname`
now=`date +%Y%m%d-%H%M`

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

eval \
borg create \
	--verbose \
	--filter AME \
	--list \
	--stats \
	--show-rc \
	--compression lz4 \
	--exclude-caches \
	--exclude '$BORG_HOME_PATH/\*/.cache/\*' \
	--exclude '/var/cache/\*' \
	--exclude '/var/tmp/\*' \
	--exclude '/var/log/\*' \
	--exclude '$BORG_HOME_PATH/\*/backups/\*' \
	$BORG_LOCAL_EXCLUDES \
	::$hostname-$now \
	/etc \
	$BORG_HOME_PATH \
	/var \
	$BORG_LOCAL_INCLUDES

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune \
	--list \
	--prefix $hostname- \
	--show-rc \
	--keep-daily 7 \
	--keep-weekly 4 \
	--keep-monthly 6 \

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
	info "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
	info "Backup and/or Prune finished with warnings"
else
	info "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
