#!/bin/sh

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

if [ -z ${BORG_BACKUP_URL+x} ]; then
	info "Error: \$BORG_BACKUP_URL undefined. Exiting."
	exit 1
fi
if [ -z ${BORG_HOME_PATH+x} ]; then
	# Linux default
	BORG_HOME_PATH=/home
fi
if [ -z ${BORG_BASE_PATH+x} ]; then
	BORG_BASE_PATH="${BORG_HOME_PATH}/${BORG_USER}"
fi

SHORT_HOSTNAME=`hostname -s`
BORG_BACKUP_PATH=$BORG_BASE_PATH/$SHORT_HOSTNAME
# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=${BORG_BACKUP_URL}/${BORG_BACKUP_PATH}
info "Using repo: $BORG_REPO"
# See the section "Passphrase notes" for more infos.
if [ -z ${BORG_PASSPHRASE+x} ]; then
	export BORG_PASSPHRASE=''
fi

info "Check passwordless access..."
ssh -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no ${BORG_USER}@${BORG_HOSTNAME} /usr/bin/true

if [ $? -ne 0 ]; then
	info "Error: no passwordless access to ${BORG_HOSTNAME}"
	exit 1

fi
info "OK"

info "Check repository existing..."
ssh ${BORG_USER}@${BORG_HOSTNAME} "ls $BORG_BACKUP_PATH &>/dev/null"

if [ $? -ne 0 ]; then
	info "Repository does not exist. Create it"
	borg init -e none "$BORG_REPO"
	if [ $? != 0 ]; then
		info "Error: Repository creating error"
		exit 1
	fi
fi
info "OK"

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on.
# noatime, noctime, maximum compression and maximum deduplication

eval \
borg create \
	--verbose \
	--filter AME \
	--list \
	--stats \
	--show-rc \
	--compression lzma,5 \
	--noatime --noctime \
	--chunker-params=buzhash,10,23,16,4095 \
	--exclude-caches \
	--exclude '$BORG_HOME_PATH/\*/.cache/\*' \
	--exclude '/var/cache/\*' \
	--exclude '/var/tmp/\*' \
	--exclude '/var/log/\*' \
	--exclude '$BORG_HOME_PATH/\*/backups/\*' \
	$BORG_LOCAL_EXCLUDES \
	::'{fqdn}-{now}' \
	/etc \
	$BORG_HOME_PATH \
	/var/spool \
	$BORG_LOCAL_INCLUDES

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-*' matching is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune \
	--list \
	--glob-archives '{hostname}-*' \
	--show-rc \
	--keep-daily 7 \
	--keep-weekly 4 \
	--keep-monthly 6 \

prune_exit=$?

# actually free repo disk space by compacting segments

info "Compacting repository"

borg compact

compact_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))
global_exit=$(( compact_exit > global_exit ? compact_exit : global_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "Backup, Prune, and Compact finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "Backup, Prune, and/or Compact finished with warnings"
else
    info "Backup, Prune, and/or Compact finished with errors"
fi

exit ${global_exit}
